#!/bin/env python3

from prettytable import PrettyTable
from os import environ
from sys import argv, path
env = environ.get


path.append(env("GAME")) # my_whatever/game_docker
from sql.sql_query import psql
from colors import fg_rgb

class fetch_data():
    def __init__(self) -> None:
        '''possible flags: -s[select] for specific value-t[table] for specific table 
            -i[index] or -n[name] for identifying specific item'''

        self.p = psql()

        self.cmd = ''
        self.first_sql_line() 
        self.second_sql_line()
        

        try:
            self.p.exec(self.cmd)
            fetched_data = self.p.fetch_dict()
            
            self.make_table(fetched_data)
            
        except (Exception) as error:
            print(error.args)


    def make_table(self, data):
        keys = data[0].keys()
        table = PrettyTable(list(keys))
        
        for item in data.values():
            # item['grade'] = fg_rgb(item['grade'])
            qq = list(item.values())
            
            table.add_row(qq)
        
        print(table)

    def first_sql_line(self):
        if '-t' in argv: # table
            index = argv.index('-t') + 1 # get next value after (flag)
            value = argv[index]
            self.cmd = f'select * from {value}\n'
        else:
            self.cmd = f'select * from items\n'

    def second_sql_line(self):
        if '-i' in argv: # index
            index = argv.index('-i') + 1
            value = argv[index]
            self.cmd += f'where id = {value}'
        elif '-n' in argv: # name
            index = argv.index('-n') + 1
            value = argv[index]
            self.cmd += f'where name = {value}'
        self.cmd += ';'
        

if __name__ == "__main__":
    fetch_data()






